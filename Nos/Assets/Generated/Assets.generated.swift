// +++++ Do not edit this file directly. Changes will be overwritten. +++++
// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

import SwiftUI

// swiftlint:disable superfluous_disable_command file_length implicit_return

extension Color {

       static let accent = Color("accent", bundle: Bundle.current)
       static let actionBannerBgGradientLeading = Color("action-banner-bg-gradient-leading", bundle: Bundle.current)
       static let actionBannerBgGradientTrailing = Color("action-banner-bg-gradient-trailing", bundle: Bundle.current)
       static let actionBannerBg = Color("action-banner-bg", bundle: Bundle.current)
       static let actionBannerButtonEffect = Color("action-banner-button-effect", bundle: Bundle.current)
       static let actionBannerButtonGradientLeading = Color("action-banner-button-gradient-leading", bundle: Bundle.current)
       static let actionBannerButtonGradientTrailing = Color("action-banner-button-gradient-trailing", bundle: Bundle.current)
       static let actionBannerButtonTxt = Color("action-banner-button-txt", bundle: Bundle.current)
       static let actionPrimaryBackground = Color("action-primary-background", bundle: Bundle.current)
       static let actionPrimaryGradientBottom = Color("action-primary-gradient-bottom", bundle: Bundle.current)
       static let actionPrimaryGradientTop = Color("action-primary-gradient-top", bundle: Bundle.current)
       static let actionSecondaryBackground = Color("action-secondary-background", bundle: Bundle.current)
       static let actionSecondaryDepthEffect = Color("action-secondary-depth-effect", bundle: Bundle.current)
       static let actionSecondaryGradientBottom = Color("action-secondary-gradient-bottom", bundle: Bundle.current)
       static let actionSecondaryGradientTop = Color("action-secondary-gradient-top", bundle: Bundle.current)
       static let actionBarBorderTop = Color("actionBarBorderTop", bundle: Bundle.current)
       static let actionBarGradientBottom = Color("actionBarGradientBottom", bundle: Bundle.current)
       static let actionBarGradientTop = Color("actionBarGradientTop", bundle: Bundle.current)
       static let appBg = Color("app-bg", bundle: Bundle.current)
       static let bioBgGradientBottom = Color("bio-bg-gradient-bottom", bundle: Bundle.current)
       static let bioBgGradientTop = Color("bio-bg-gradient-top", bundle: Bundle.current)
       static let buttonBevelBg = Color("button-bevel-bg", bundle: Bundle.current)
       static let buttonBevelBottom = Color("button-bevel-bottom", bundle: Bundle.current)
       static let buttonBevelTop = Color("button-bevel-top", bundle: Bundle.current)
       static let card3d = Color("card-3d", bundle: Bundle.current)
       static let cardBgBottom = Color("card-bg-bottom", bundle: Bundle.current)
       static let cardBgTop = Color("card-bg-top", bundle: Bundle.current)
       static let cardDividerBottomShadow = Color("card-divider-bottom-shadow", bundle: Bundle.current)
       static let cardDividerBottom = Color("card-divider-bottom", bundle: Bundle.current)
       static let cardDividerTopShadow = Color("card-divider-top-shadow", bundle: Bundle.current)
       static let cardDividerTop = Color("card-divider-top", bundle: Bundle.current)
       static let cardShadowBottom = Color("card-shadow-bottom", bundle: Bundle.current)
       static let hashtagBg = Color("hashtag-bg", bundle: Bundle.current)
       static let nip05BgGradientBottom = Color("nip05-bg-gradient-bottom", bundle: Bundle.current)
       static let nip05BgGradientTop = Color("nip05-bg-gradient-top", bundle: Bundle.current)
       static let pickerBackgroundSelected = Color("picker-background-selected", bundle: Bundle.current)
       static let previewBg = Color("preview-bg", bundle: Bundle.current)
       static let primaryTxt = Color("primary-txt", bundle: Bundle.current)
       static let profileBgBottom = Color("profile-bg-bottom", bundle: Bundle.current)
       static let profileBgTop = Color("profile-bg-top", bundle: Bundle.current)
       static let profileDividerShadow = Color("profile-divider-shadow", bundle: Bundle.current)
       static let profileDivider = Color("profile-divider", bundle: Bundle.current)
       static let profileShadow = Color("profile-shadow", bundle: Bundle.current)
       static let secondaryTxt = Color("secondary-txt", bundle: Bundle.current)
       static let storiesBgBottom = Color("stories-bg-bottom", bundle: Bundle.current)
       static let storiesBgTop = Color("stories-bg-top", bundle: Bundle.current)
       static let textFieldBg = Color("text-field-bg", bundle: Bundle.current)
       static let unsBannerButtonEffect = Color("uns-banner-button-effect", bundle: Bundle.current)
       static let unsBannerButtonTxt = Color("uns-banner-button-txt", bundle: Bundle.current)
       static let unsButtonGradientBottom = Color("uns-button-gradient-bottom", bundle: Bundle.current)
       static let unsButtonGradientTop = Color("uns-button-gradient-top", bundle: Bundle.current)
       static let unsCheckmark = Color("uns-checkmark", bundle: Bundle.current)
       static let unsLogoBackground = Color("uns-logo-background", bundle: Bundle.current)
       static let el = Color("El", bundle: Bundle.current)
       static let usbcLogoBackground = Color("usbc-logo-background", bundle: Bundle.current)
}

extension UIColor {

       static let accent = UIColor(named: "accent", in: Bundle.current, compatibleWith: nil)!
       static let actionBannerBgGradientLeading = UIColor(named: "action-banner-bg-gradient-leading", in: Bundle.current, compatibleWith: nil)!
       static let actionBannerBgGradientTrailing = UIColor(named: "action-banner-bg-gradient-trailing", in: Bundle.current, compatibleWith: nil)!
       static let actionBannerBg = UIColor(named: "action-banner-bg", in: Bundle.current, compatibleWith: nil)!
       static let actionBannerButtonEffect = UIColor(named: "action-banner-button-effect", in: Bundle.current, compatibleWith: nil)!
       static let actionBannerButtonGradientLeading = UIColor(named: "action-banner-button-gradient-leading", in: Bundle.current, compatibleWith: nil)!
       static let actionBannerButtonGradientTrailing = UIColor(named: "action-banner-button-gradient-trailing", in: Bundle.current, compatibleWith: nil)!
       static let actionBannerButtonTxt = UIColor(named: "action-banner-button-txt", in: Bundle.current, compatibleWith: nil)!
       static let actionPrimaryBackground = UIColor(named: "action-primary-background", in: Bundle.current, compatibleWith: nil)!
       static let actionPrimaryGradientBottom = UIColor(named: "action-primary-gradient-bottom", in: Bundle.current, compatibleWith: nil)!
       static let actionPrimaryGradientTop = UIColor(named: "action-primary-gradient-top", in: Bundle.current, compatibleWith: nil)!
       static let actionSecondaryBackground = UIColor(named: "action-secondary-background", in: Bundle.current, compatibleWith: nil)!
       static let actionSecondaryDepthEffect = UIColor(named: "action-secondary-depth-effect", in: Bundle.current, compatibleWith: nil)!
       static let actionSecondaryGradientBottom = UIColor(named: "action-secondary-gradient-bottom", in: Bundle.current, compatibleWith: nil)!
       static let actionSecondaryGradientTop = UIColor(named: "action-secondary-gradient-top", in: Bundle.current, compatibleWith: nil)!
       static let actionBarBorderTop = UIColor(named: "actionBarBorderTop", in: Bundle.current, compatibleWith: nil)!
       static let actionBarGradientBottom = UIColor(named: "actionBarGradientBottom", in: Bundle.current, compatibleWith: nil)!
       static let actionBarGradientTop = UIColor(named: "actionBarGradientTop", in: Bundle.current, compatibleWith: nil)!
       static let appBg = UIColor(named: "app-bg", in: Bundle.current, compatibleWith: nil)!
       static let bioBgGradientBottom = UIColor(named: "bio-bg-gradient-bottom", in: Bundle.current, compatibleWith: nil)!
       static let bioBgGradientTop = UIColor(named: "bio-bg-gradient-top", in: Bundle.current, compatibleWith: nil)!
       static let buttonBevelBg = UIColor(named: "button-bevel-bg", in: Bundle.current, compatibleWith: nil)!
       static let buttonBevelBottom = UIColor(named: "button-bevel-bottom", in: Bundle.current, compatibleWith: nil)!
       static let buttonBevelTop = UIColor(named: "button-bevel-top", in: Bundle.current, compatibleWith: nil)!
       static let card3d = UIColor(named: "card-3d", in: Bundle.current, compatibleWith: nil)!
       static let cardBgBottom = UIColor(named: "card-bg-bottom", in: Bundle.current, compatibleWith: nil)!
       static let cardBgTop = UIColor(named: "card-bg-top", in: Bundle.current, compatibleWith: nil)!
       static let cardDividerBottomShadow = UIColor(named: "card-divider-bottom-shadow", in: Bundle.current, compatibleWith: nil)!
       static let cardDividerBottom = UIColor(named: "card-divider-bottom", in: Bundle.current, compatibleWith: nil)!
       static let cardDividerTopShadow = UIColor(named: "card-divider-top-shadow", in: Bundle.current, compatibleWith: nil)!
       static let cardDividerTop = UIColor(named: "card-divider-top", in: Bundle.current, compatibleWith: nil)!
       static let cardShadowBottom = UIColor(named: "card-shadow-bottom", in: Bundle.current, compatibleWith: nil)!
       static let hashtagBg = UIColor(named: "hashtag-bg", in: Bundle.current, compatibleWith: nil)!
       static let nip05BgGradientBottom = UIColor(named: "nip05-bg-gradient-bottom", in: Bundle.current, compatibleWith: nil)!
       static let nip05BgGradientTop = UIColor(named: "nip05-bg-gradient-top", in: Bundle.current, compatibleWith: nil)!
       static let pickerBackgroundSelected = UIColor(named: "picker-background-selected", in: Bundle.current, compatibleWith: nil)!
       static let previewBg = UIColor(named: "preview-bg", in: Bundle.current, compatibleWith: nil)!
       static let primaryTxt = UIColor(named: "primary-txt", in: Bundle.current, compatibleWith: nil)!
       static let profileBgBottom = UIColor(named: "profile-bg-bottom", in: Bundle.current, compatibleWith: nil)!
       static let profileBgTop = UIColor(named: "profile-bg-top", in: Bundle.current, compatibleWith: nil)!
       static let profileDividerShadow = UIColor(named: "profile-divider-shadow", in: Bundle.current, compatibleWith: nil)!
       static let profileDivider = UIColor(named: "profile-divider", in: Bundle.current, compatibleWith: nil)!
       static let profileShadow = UIColor(named: "profile-shadow", in: Bundle.current, compatibleWith: nil)!
       static let secondaryTxt = UIColor(named: "secondary-txt", in: Bundle.current, compatibleWith: nil)!
       static let storiesBgBottom = UIColor(named: "stories-bg-bottom", in: Bundle.current, compatibleWith: nil)!
       static let storiesBgTop = UIColor(named: "stories-bg-top", in: Bundle.current, compatibleWith: nil)!
       static let textFieldBg = UIColor(named: "text-field-bg", in: Bundle.current, compatibleWith: nil)!
       static let unsBannerButtonEffect = UIColor(named: "uns-banner-button-effect", in: Bundle.current, compatibleWith: nil)!
       static let unsBannerButtonTxt = UIColor(named: "uns-banner-button-txt", in: Bundle.current, compatibleWith: nil)!
       static let unsButtonGradientBottom = UIColor(named: "uns-button-gradient-bottom", in: Bundle.current, compatibleWith: nil)!
       static let unsButtonGradientTop = UIColor(named: "uns-button-gradient-top", in: Bundle.current, compatibleWith: nil)!
       static let unsCheckmark = UIColor(named: "uns-checkmark", in: Bundle.current, compatibleWith: nil)!
       static let unsLogoBackground = UIColor(named: "uns-logo-background", in: Bundle.current, compatibleWith: nil)!
       static let el = UIColor(named: "El", in: Bundle.current, compatibleWith: nil)!
       static let usbcLogoBackground = UIColor(named: "usbc-logo-background", in: Bundle.current, compatibleWith: nil)!
}

extension Image {

       static let activityPub = Image("ActivityPub", bundle: Bundle.current)
       static let info = Image("Info", bundle: Bundle.current)
       static let unsCheck = Image("uns-check", bundle: Bundle.current)
       static let unsChooseName = Image("uns-choose-name", bundle: Bundle.current)
       static let unsCircle = Image("uns-circle", bundle: Bundle.current)
       static let unsIntro = Image("uns-intro", bundle: Bundle.current)
       static let unsLogoDark = Image("uns-logo-dark", bundle: Bundle.current)
       static let unsLogoLight = Image("uns-logo-light", bundle: Bundle.current)
       static let unsNameTaken = Image("uns-name-taken", bundle: Bundle.current)
       static let unsName = Image("uns-name", bundle: Bundle.current)
       static let unsPhone = Image("uns-phone", bundle: Bundle.current)
       static let unsPremium = Image("uns-premium", bundle: Bundle.current)
       static let unsVerificationCode = Image("uns-verification-code", bundle: Bundle.current)
       static let x = Image("X", bundle: Bundle.current)
       static let atSymbol = Image("at_symbol", bundle: Bundle.current)
       static let attachMediaButton = Image("attach-media-button", bundle: Bundle.current)
       static let backChevron = Image("back-chevron", bundle: Bundle.current)
       static let buttonLikeActive = Image("button-like-active", bundle: Bundle.current)
       static let buttonLikeDefault = Image("button-like-default", bundle: Bundle.current)
       static let buttonReply = Image("button-reply", bundle: Bundle.current)
       static let checkmark = Image("checkmark", bundle: Bundle.current)
       static let copyIcon = Image("copy-icon", bundle: Bundle.current)
       static let disappearingMessages = Image("disappearing-messages", bundle: Bundle.current)
       static let editProfile = Image("edit-profile", bundle: Bundle.current)
       static let emptyAvatar = Image("emptyAvatar", bundle: Bundle.current)
       static let flagPlain = Image("flag-plain", bundle: Bundle.current)
       static let followIcon = Image("follow-icon", bundle: Bundle.current)
       static let followingIcon = Image("following-icon", bundle: Bundle.current)
       static let navIconDismiss = Image("nav-icon-dismiss", bundle: Bundle.current)
       static let newPostButton = Image("newPostButton", bundle: Bundle.current)
       static let nosLogo = Image("nosLogo", bundle: Bundle.current)
       static let profileFeed = Image("profile-feed", bundle: Bundle.current)
       static let profilePosts = Image("profile-posts", bundle: Bundle.current)
       static let relayLeft = Image("relay-left", bundle: Bundle.current)
       static let relayRight = Image("relay-right", bundle: Bundle.current)
       static let repostButtonPressed = Image("repost-button-pressed", bundle: Bundle.current)
       static let repostButton = Image("repost-button", bundle: Bundle.current)
       static let repostSymbol = Image("repost-symbol", bundle: Bundle.current)
       static let sideMenu = Image("sideMenu", bundle: Bundle.current)
       static let slimFollowIcon = Image("slim-follow-icon", bundle: Bundle.current)
       static let slimFollowingIcon = Image("slim-following-icon", bundle: Bundle.current)
       static let stories = Image("stories", bundle: Bundle.current)
       static let tabIconEveryoneSelected = Image("tab-icon-everyone-selected", bundle: Bundle.current)
       static let tabIconEveryone = Image("tab-icon-everyone", bundle: Bundle.current)
       static let tabIconHomeSelected = Image("tab-icon-home-selected", bundle: Bundle.current)
       static let tabIconHome = Image("tab-icon-home", bundle: Bundle.current)
       static let tabIconNotificationsSelected = Image("tab-icon-notifications-selected", bundle: Bundle.current)
       static let tabIconNotifications = Image("tab-icon-notifications", bundle: Bundle.current)
       static let tabProfileSelected = Image("tab-profile-selected", bundle: Bundle.current)
       static let tabProfile = Image("tab-profile", bundle: Bundle.current)
       static let usbcLogo = Image("usbc-logo", bundle: Bundle.current)
       static let warningEye = Image("warning-eye", bundle: Bundle.current)
}

extension UIImage {

       static let activityPub = UIImage(named: "ActivityPub", in: Bundle.current, with: nil)!
       static let info = UIImage(named: "Info", in: Bundle.current, with: nil)!
       static let unsCheck = UIImage(named: "uns-check", in: Bundle.current, with: nil)!
       static let unsChooseName = UIImage(named: "uns-choose-name", in: Bundle.current, with: nil)!
       static let unsCircle = UIImage(named: "uns-circle", in: Bundle.current, with: nil)!
       static let unsIntro = UIImage(named: "uns-intro", in: Bundle.current, with: nil)!
       static let unsLogoDark = UIImage(named: "uns-logo-dark", in: Bundle.current, with: nil)!
       static let unsLogoLight = UIImage(named: "uns-logo-light", in: Bundle.current, with: nil)!
       static let unsNameTaken = UIImage(named: "uns-name-taken", in: Bundle.current, with: nil)!
       static let unsName = UIImage(named: "uns-name", in: Bundle.current, with: nil)!
       static let unsPhone = UIImage(named: "uns-phone", in: Bundle.current, with: nil)!
       static let unsPremium = UIImage(named: "uns-premium", in: Bundle.current, with: nil)!
       static let unsVerificationCode = UIImage(named: "uns-verification-code", in: Bundle.current, with: nil)!
       static let x = UIImage(named: "X", in: Bundle.current, with: nil)!
       static let atSymbol = UIImage(named: "at_symbol", in: Bundle.current, with: nil)!
       static let attachMediaButton = UIImage(named: "attach-media-button", in: Bundle.current, with: nil)!
       static let backChevron = UIImage(named: "back-chevron", in: Bundle.current, with: nil)!
       static let buttonLikeActive = UIImage(named: "button-like-active", in: Bundle.current, with: nil)!
       static let buttonLikeDefault = UIImage(named: "button-like-default", in: Bundle.current, with: nil)!
       static let buttonReply = UIImage(named: "button-reply", in: Bundle.current, with: nil)!
       static let checkmark = UIImage(named: "checkmark", in: Bundle.current, with: nil)!
       static let copyIcon = UIImage(named: "copy-icon", in: Bundle.current, with: nil)!
       static let disappearingMessages = UIImage(named: "disappearing-messages", in: Bundle.current, with: nil)!
       static let editProfile = UIImage(named: "edit-profile", in: Bundle.current, with: nil)!
       static let emptyAvatar = UIImage(named: "emptyAvatar", in: Bundle.current, with: nil)!
       static let flagPlain = UIImage(named: "flag-plain", in: Bundle.current, with: nil)!
       static let followIcon = UIImage(named: "follow-icon", in: Bundle.current, with: nil)!
       static let followingIcon = UIImage(named: "following-icon", in: Bundle.current, with: nil)!
       static let navIconDismiss = UIImage(named: "nav-icon-dismiss", in: Bundle.current, with: nil)!
       static let newPostButton = UIImage(named: "newPostButton", in: Bundle.current, with: nil)!
       static let nosLogo = UIImage(named: "nosLogo", in: Bundle.current, with: nil)!
       static let profileFeed = UIImage(named: "profile-feed", in: Bundle.current, with: nil)!
       static let profilePosts = UIImage(named: "profile-posts", in: Bundle.current, with: nil)!
       static let relayLeft = UIImage(named: "relay-left", in: Bundle.current, with: nil)!
       static let relayRight = UIImage(named: "relay-right", in: Bundle.current, with: nil)!
       static let repostButtonPressed = UIImage(named: "repost-button-pressed", in: Bundle.current, with: nil)!
       static let repostButton = UIImage(named: "repost-button", in: Bundle.current, with: nil)!
       static let repostSymbol = UIImage(named: "repost-symbol", in: Bundle.current, with: nil)!
       static let sideMenu = UIImage(named: "sideMenu", in: Bundle.current, with: nil)!
       static let slimFollowIcon = UIImage(named: "slim-follow-icon", in: Bundle.current, with: nil)!
       static let slimFollowingIcon = UIImage(named: "slim-following-icon", in: Bundle.current, with: nil)!
       static let stories = UIImage(named: "stories", in: Bundle.current, with: nil)!
       static let tabIconEveryoneSelected = UIImage(named: "tab-icon-everyone-selected", in: Bundle.current, with: nil)!
       static let tabIconEveryone = UIImage(named: "tab-icon-everyone", in: Bundle.current, with: nil)!
       static let tabIconHomeSelected = UIImage(named: "tab-icon-home-selected", in: Bundle.current, with: nil)!
       static let tabIconHome = UIImage(named: "tab-icon-home", in: Bundle.current, with: nil)!
       static let tabIconNotificationsSelected = UIImage(named: "tab-icon-notifications-selected", in: Bundle.current, with: nil)!
       static let tabIconNotifications = UIImage(named: "tab-icon-notifications", in: Bundle.current, with: nil)!
       static let tabProfileSelected = UIImage(named: "tab-profile-selected", in: Bundle.current, with: nil)!
       static let tabProfile = UIImage(named: "tab-profile", in: Bundle.current, with: nil)!
       static let usbcLogo = UIImage(named: "usbc-logo", in: Bundle.current, with: nil)!
       static let warningEye = UIImage(named: "warning-eye", in: Bundle.current, with: nil)!
}

// swiftlint:enable all
